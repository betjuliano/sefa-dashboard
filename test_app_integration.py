"""
Teste da integra√ß√£o do novo sistema com o app.py

Este script testa se a integra√ß√£o foi aplicada corretamente e se todas as
funcionalidades est√£o funcionando como esperado.
"""

import pandas as pd
import numpy as np
import sys
import os

# Adicionar o diret√≥rio atual ao path para imports
sys.path.append('.')

def test_imports():
    """Testa se todos os imports necess√°rios funcionam"""
    print("üîç Testando imports...")
    
    try:
        from app_integration import (
            app_integration,
            update_global_variables,
            filter_by_question_set,
            compute_metrics,
            normalize_likert,
            normalize_satisfaction
        )
        print("‚úÖ Imports da integra√ß√£o funcionando")
        return True
    except Exception as e:
        print(f"‚ùå Erro nos imports: {e}")
        return False


def test_core_system():
    """Testa se o sistema core est√° funcionando"""
    print("\nüîç Testando sistema core...")
    
    try:
        from core import QuestionnaireProcessor, ScaleConverter, TextNormalizer
        
        processor = QuestionnaireProcessor()
        scale_converter = ScaleConverter()
        text_normalizer = TextNormalizer()
        
        print("‚úÖ Sistema core funcionando")
        return True
    except Exception as e:
        print(f"‚ùå Erro no sistema core: {e}")
        return False


def test_configuration_loading():
    """Testa carregamento de configura√ß√µes"""
    print("\nüîç Testando carregamento de configura√ß√µes...")
    
    try:
        from app_integration import app_integration
        
        # Testar base20
        config_base20 = app_integration.processor.load_configuration("base20")
        print(f"‚úÖ Base20 carregada: {len(config_base20['dimensions'])} dimens√µes")
        
        # Testar base8
        config_base8 = app_integration.processor.load_configuration("base8")
        print(f"‚úÖ Base8 carregada: {len(config_base8['dimensions'])} dimens√µes")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro no carregamento de configura√ß√µes: {e}")
        return False


def test_scale_conversion():
    """Testa convers√£o de escalas"""
    print("\nüîç Testando convers√£o de escalas...")
    
    try:
        from app_integration import normalize_likert, normalize_satisfaction
        
        # Testar Likert
        likert_data = pd.Series([
            "Concordo totalmente",
            "Concordo", 
            "Indiferente",
            "Discordo",
            "Discordo totalmente"
        ])
        
        likert_result = normalize_likert(likert_data)
        expected_likert = [5, 4, 3, 2, 1]
        
        if likert_result.tolist() == expected_likert:
            print("‚úÖ Convers√£o Likert funcionando")
        else:
            print(f"‚ùå Convers√£o Likert incorreta: {likert_result.tolist()} != {expected_likert}")
            return False
        
        # Testar Satisfa√ß√£o
        satisfaction_data = pd.Series([
            "Muito satisfeito",
            "Satisfeito",
            "Indiferente", 
            "Insatisfeito",
            "Muito insatisfeito"
        ])
        
        satisfaction_result = normalize_satisfaction(satisfaction_data)
        expected_satisfaction = [5, 4, 3, 2, 1]
        
        if satisfaction_result.tolist() == expected_satisfaction:
            print("‚úÖ Convers√£o de satisfa√ß√£o funcionando")
        else:
            print(f"‚ùå Convers√£o de satisfa√ß√£o incorreta: {satisfaction_result.tolist()} != {expected_satisfaction}")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå Erro na convers√£o de escalas: {e}")
        return False


def test_filtering():
    """Testa filtragem por conjunto de quest√µes"""
    print("\nüîç Testando filtragem por conjunto...")
    
    try:
        from app_integration import filter_by_question_set
        
        # Criar dataset de teste
        test_data = pd.DataFrame({
            "O sistema √© f√°cil de usar.": ["Concordo", "Concordo totalmente"],
            "As informa√ß√µes s√£o claras.": ["Concordo", "Concordo"],
            "Consigo obter o que preciso no menor tempo poss√≠vel.": ["Indiferente", "Concordo"],
            "Qual o seu sexo?": ["Masculino", "Feminino"],
            "Timestamp": pd.date_range("2024-01-01", periods=2)
        })
        
        # Testar filtro base20
        filtered_base20 = filter_by_question_set(test_data, "20 quest√µes")
        print(f"‚úÖ Filtro base20: {len(filtered_base20.columns)} colunas")
        
        # Testar filtro base8
        filtered_base8 = filter_by_question_set(test_data, "8 quest√µes")
        print(f"‚úÖ Filtro base8: {len(filtered_base8.columns)} colunas")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro na filtragem: {e}")
        return False


def test_metrics_computation():
    """Testa c√°lculo de m√©tricas"""
    print("\nüîç Testando c√°lculo de m√©tricas...")
    
    try:
        from app_integration import compute_metrics
        
        # Criar dataset de teste
        test_data = pd.DataFrame({
            "O sistema √© f√°cil de usar.": [
                "Concordo totalmente", "Concordo", "Indiferente", 
                "Concordo", "Concordo totalmente"
            ],
            "As informa√ß√µes s√£o claras.": [
                "Concordo", "Concordo totalmente", "Concordo",
                "Indiferente", "Concordo"
            ],
            "Consigo obter o que preciso no menor tempo poss√≠vel.": [
                "Concordo", "Concordo", "Indiferente",
                "Discordo", "Concordo"
            ],
            "Qual o seu n√≠vel de satisfa√ß√£o com o Sistema?": [
                "Muito satisfeito", "Satisfeito", "Satisfeito",
                "Indiferente", "Muito satisfeito"
            ]
        })
        
        # Calcular m√©tricas
        results = compute_metrics(test_data, 4.0)
        
        # Verificar estrutura dos resultados
        required_keys = ["items", "dimensions", "satisfaction", "insights"]
        for key in required_keys:
            if key not in results:
                print(f"‚ùå Chave '{key}' n√£o encontrada nos resultados")
                return False
        
        print(f"‚úÖ M√©tricas calculadas: {len(results['items'])} itens, {len(results['dimensions'])} dimens√µes")
        
        # Verificar se h√° insights
        total_insights = sum(len(results['insights'][category]) for category in results['insights'])
        print(f"‚úÖ Insights gerados: {total_insights} itens classificados")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro no c√°lculo de m√©tricas: {e}")
        return False


def test_app_compatibility():
    """Testa compatibilidade com app.py"""
    print("\nüîç Testando compatibilidade com app.py...")
    
    try:
        # Verificar se app.py foi modificado corretamente
        with open("app.py", "r", encoding="utf-8") as f:
            app_content = f.read()
        
        # Verificar se imports foram adicionados
        if "from app_integration import" in app_content:
            print("‚úÖ Imports do novo sistema encontrados no app.py")
        else:
            print("‚ùå Imports do novo sistema n√£o encontrados no app.py")
            return False
        
        # Verificar se fun√ß√µes foram substitu√≠das
        if "NOVO SISTEMA" in app_content:
            print("‚úÖ Fun√ß√µes do novo sistema encontradas no app.py")
        else:
            print("‚ùå Fun√ß√µes do novo sistema n√£o encontradas no app.py")
            return False
        
        # Verificar se melhorias da barra lateral foram adicionadas
        if "add_sidebar_enhancements" in app_content:
            print("‚úÖ Melhorias da barra lateral encontradas no app.py")
        else:
            print("‚ùå Melhorias da barra lateral n√£o encontradas no app.py")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o de compatibilidade: {e}")
        return False


def test_performance():
    """Testa performance do novo sistema"""
    print("\nüîç Testando performance...")
    
    try:
        import time
        from app_integration import compute_metrics
        
        # Criar dataset maior para teste de performance
        n_responses = 1000
        responses = ["Discordo totalmente", "Discordo", "Indiferente", "Concordo", "Concordo totalmente"]
        
        large_data = pd.DataFrame({
            "O sistema √© f√°cil de usar.": np.random.choice(responses, n_responses),
            "As informa√ß√µes s√£o claras.": np.random.choice(responses, n_responses),
            "Os servi√ßos atendem √†s expectativas.": np.random.choice(responses, n_responses),
        })
        
        # Medir tempo de processamento
        start_time = time.time()
        results = compute_metrics(large_data, 4.0)
        end_time = time.time()
        
        processing_time = end_time - start_time
        rate = n_responses / processing_time
        
        print(f"‚úÖ Performance: {processing_time:.3f}s para {n_responses:,} respostas")
        print(f"‚úÖ Taxa: {rate:,.0f} respostas/segundo")
        
        # Verificar se o cache est√° funcionando
        start_time = time.time()
        results2 = compute_metrics(large_data, 4.0)  # Deve usar cache
        end_time = time.time()
        
        cache_time = end_time - start_time
        if cache_time < processing_time / 2:
            print(f"‚úÖ Cache funcionando: {cache_time:.3f}s (2¬™ execu√ß√£o)")
        else:
            print(f"‚ö†Ô∏è Cache pode n√£o estar funcionando: {cache_time:.3f}s")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro no teste de performance: {e}")
        return False


def run_all_tests():
    """Executa todos os testes"""
    print("üß™ Teste de Integra√ß√£o do Novo Sistema")
    print("=" * 50)
    
    tests = [
        ("Imports", test_imports),
        ("Sistema Core", test_core_system),
        ("Carregamento de Configura√ß√µes", test_configuration_loading),
        ("Convers√£o de Escalas", test_scale_conversion),
        ("Filtragem", test_filtering),
        ("C√°lculo de M√©tricas", test_metrics_computation),
        ("Compatibilidade com app.py", test_app_compatibility),
        ("Performance", test_performance)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå Erro inesperado em {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumo dos resultados
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES:")
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
        print(f"  {status} - {test_name}")
        if success:
            passed += 1
    
    print(f"\nüéØ RESULTADO FINAL: {passed}/{total} testes passaram")
    
    if passed == total:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("\n‚úÖ A integra√ß√£o foi aplicada com sucesso!")
        print("‚úÖ O novo sistema est√° funcionando corretamente!")
        print("‚úÖ O app.py est√° pronto para uso!")
        
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("  1. Execute: streamlit run app.py")
        print("  2. Teste os filtros da barra lateral")
        print("  3. Verifique as valida√ß√µes de estrutura")
        print("  4. Observe as melhorias de performance")
        print("  5. Use as novas funcionalidades de debug")
        
        return True
    else:
        print(f"\n‚ùå {total - passed} TESTES FALHARAM!")
        print("\nüîß A√á√ïES NECESS√ÅRIAS:")
        print("  1. Verifique os erros reportados acima")
        print("  2. Corrija os problemas identificados")
        print("  3. Execute os testes novamente")
        
        return False


if __name__ == "__main__":
    success = run_all_tests()
    
    if success:
        print("\n" + "=" * 50)
        print("üéØ INTEGRA√á√ÉO COMPLETA E FUNCIONAL!")
        exit(0)
    else:
        print("\n" + "=" * 50)
        print("‚ùå INTEGRA√á√ÉO INCOMPLETA - CORRE√á√ïES NECESS√ÅRIAS")
        exit(1)