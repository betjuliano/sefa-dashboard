"""
Teste para verificar se o QuestionnaireProcessor est√° processando corretamente
a estrutura de dimens√µes do Base20 e Base8
"""
import pandas as pd
import numpy as np
from core.questionnaire_processor import QuestionnaireProcessor


def create_base20_sample_data():
    """Cria dados de amostra que correspondem √† estrutura Base20"""
    
    # QS - 10 quest√µes
    qs_questions = [
        "O sistema funciona sem falhas.",
        "Os recursos de acessibilidade do sistema s√£o f√°ceis de encontrar.",
        "O sistema √© f√°cil de usar.",
        "O sistema est√° dispon√≠vel para uso em qualquer dia e hora.",
        "O desempenho do sistema √© satisfat√≥rio, independentemente da forma de acesso.",
        "O sistema informa sobre as pol√≠ticas de privacidade e seguran√ßa.",
        "Acredito que meus dados est√£o seguros neste sistema.",
        "√â f√°cil localizar os servi√ßos e as informa√ß√µes no sistema.",
        "A navega√ß√£o pelo sistema √© intuitiva.",
        "O sistema oferece instru√ß√µes √∫teis de como utilizar os servi√ßos."
    ]
    
    # QI - 7 quest√µes
    qi_questions = [
        "As informa√ß√µes s√£o f√°ceis de entender.",
        "As informa√ß√µes s√£o precisas.",
        "As informa√ß√µes auxiliam na solicita√ß√£o dos servi√ßos.",
        "Todas as informa√ß√µes necess√°rias para a solicita√ß√£o dos servi√ßos s√£o fornecidas.",
        "O prazo de entrega dos servi√ßos √© informado.",
        "As taxas cobradas pelos servi√ßos s√£o informadas.",
        "As informa√ß√µes disponibilizadas est√£o atualizadas."
    ]
    
    # QO - 9 quest√µes
    qo_questions = [
        "Os servi√ßos oferecem suporte t√©cnico eficiente.",
        "O atendimento resolve meus problemas.",
        "Os servi√ßos permitem a conclus√£o das tarefas no menor tempo poss√≠vel.",
        "Consigo obter o que preciso no menor tempo poss√≠vel.",
        "Os servi√ßos atendem √†s minhas expectativas.",
        "Quando preciso de ajuda, minhas dificuldades s√£o resolvidas.",
        "Meus dados s√£o automaticamente identificados na solicita√ß√£o dos servi√ßos.",
        "Os servi√ßos oferecidos s√£o confi√°veis.",
        "Os servi√ßos permitem intera√ß√µes em tempo real (ex. chatbot, IA)."
    ]
    
    # Criar dados de amostra
    responses = ["Discordo totalmente", "Discordo", "Indiferente", "Concordo", "Concordo totalmente"]
    n_responses = 50
    
    data = {}
    
    # Adicionar todas as quest√µes
    all_questions = qs_questions + qi_questions + qo_questions
    for question in all_questions:
        data[question] = np.random.choice(responses, n_responses)
    
    # Adicionar satisfa√ß√£o
    data["Qual o seu n√≠vel de satisfa√ß√£o com o Sistema?"] = np.random.choice(
        ["Muito insatisfeito", "Insatisfeito", "Indiferente", "Satisfeito", "Muito satisfeito"], 
        n_responses
    )
    
    return pd.DataFrame(data)


def create_base8_sample_data():
    """Cria dados de amostra que correspondem √† estrutura Base8"""
    
    # QS - 4 quest√µes
    qs_questions = [
        "O Portal √© f√°cil de usar.",
        "√â f√°cil localizar os dados e as informa√ß√µes no Portal.",
        "A navega√ß√£o pelo Portal √© intuitiva.",
        "O Portal funciona sem falhas."
    ]
    
    # QI - 3 quest√µes
    qi_questions = [
        "As informa√ß√µes s√£o f√°ceis de entender.",
        "As informa√ß√µes s√£o precisas.",
        "As informa√ß√µes disponibilizadas est√£o atualizadas."
    ]
    
    # QO - 1 quest√£o
    qo_questions = [
        "Consigo obter o que preciso no menor tempo poss√≠vel."
    ]
    
    # Criar dados de amostra
    responses = ["Discordo totalmente", "Discordo", "Neutro", "Concordo", "Concordo totalmente"]
    n_responses = 30
    
    data = {}
    
    # Adicionar todas as quest√µes
    all_questions = qs_questions + qi_questions + qo_questions
    for question in all_questions:
        data[question] = np.random.choice(responses, n_responses)
    
    # Adicionar satisfa√ß√£o
    data["Qual o seu n√≠vel de satisfa√ß√£o com o Portal da Transpar√™ncia do RS?"] = np.random.choice(
        ["Muito insatisfeito", "Insatisfeito", "Neutro", "Satisfeito", "Muito satisfeito"], 
        n_responses
    )
    
    return pd.DataFrame(data)


def test_base20_structure():
    """Testa o processamento da estrutura Base20"""
    print("=== Teste Base20 ===\n")
    
    # Criar dados de amostra
    df = create_base20_sample_data()
    print(f"üìä Dataset Base20 criado: {len(df)} respostas, {len(df.columns)} colunas")
    
    # Processar
    processor = QuestionnaireProcessor()
    results = processor.process_questionnaire_data(df, "base20")
    
    print(f"\nüìã Resultados Base20:")
    print(f"  M√©dia Geral: {results.overall_mean:.2f}")
    print(f"  Dimens√µes Processadas: {len(results.dimensions)}")
    
    # Verificar estrutura das dimens√µes
    expected_structure = {
        "Qualidade do Sistema": 10,
        "Qualidade da Informa√ß√£o": 7,
        "Qualidade da Opera√ß√£o": 9
    }
    
    print(f"\nüéØ Verifica√ß√£o da Estrutura:")
    all_correct = True
    
    for dimension_name, expected_count in expected_structure.items():
        if dimension_name in results.dimensions:
            actual_count = results.dimensions[dimension_name].question_count
            status = "‚úÖ" if actual_count == expected_count else "‚ùå"
            print(f"  {status} {dimension_name}: {actual_count}/{expected_count} quest√µes")
            if actual_count != expected_count:
                all_correct = False
        else:
            print(f"  ‚ùå {dimension_name}: DIMENS√ÉO N√ÉO ENCONTRADA")
            all_correct = False
    
    if results.processing_errors:
        print(f"\n‚ö†Ô∏è  Erros: {len(results.processing_errors)}")
        for error in results.processing_errors[:3]:
            print(f"    - {error}")
    
    if results.question_mapping_issues:
        print(f"\nüîç Quest√µes n√£o mapeadas: {len(results.question_mapping_issues)}")
    
    return all_correct


def test_base8_structure():
    """Testa o processamento da estrutura Base8"""
    print("\n=== Teste Base8 ===\n")
    
    # Criar dados de amostra
    df = create_base8_sample_data()
    print(f"üìä Dataset Base8 criado: {len(df)} respostas, {len(df.columns)} colunas")
    
    # Processar
    processor = QuestionnaireProcessor()
    results = processor.process_questionnaire_data(df, "base8")
    
    print(f"\nüìã Resultados Base8:")
    print(f"  M√©dia Geral: {results.overall_mean:.2f}")
    print(f"  Dimens√µes Processadas: {len(results.dimensions)}")
    
    # Verificar estrutura das dimens√µes
    expected_structure = {
        "Qualidade do Sistema": 4,
        "Qualidade da Informa√ß√£o": 3,
        "Qualidade da Opera√ß√£o": 1
    }
    
    print(f"\nüéØ Verifica√ß√£o da Estrutura:")
    all_correct = True
    
    for dimension_name, expected_count in expected_structure.items():
        if dimension_name in results.dimensions:
            actual_count = results.dimensions[dimension_name].question_count
            status = "‚úÖ" if actual_count == expected_count else "‚ùå"
            print(f"  {status} {dimension_name}: {actual_count}/{expected_count} quest√µes")
            if actual_count != expected_count:
                all_correct = False
        else:
            print(f"  ‚ùå {dimension_name}: DIMENS√ÉO N√ÉO ENCONTRADA")
            all_correct = False
    
    if results.processing_errors:
        print(f"\n‚ö†Ô∏è  Erros: {len(results.processing_errors)}")
        for error in results.processing_errors[:3]:
            print(f"    - {error}")
    
    if results.question_mapping_issues:
        print(f"\nüîç Quest√µes n√£o mapeadas: {len(results.question_mapping_issues)}")
    
    return all_correct


def test_dimension_switching():
    """Testa a troca entre Base20 e Base8"""
    print("\n=== Teste de Troca de Dimens√µes ===\n")
    
    processor = QuestionnaireProcessor()
    
    # Testar carregamento de configura√ß√µes
    print("üîÑ Testando carregamento de configura√ß√µes...")
    
    # Carregar Base20
    config_base20 = processor.load_configuration("base20")
    print(f"  ‚úÖ Base20 carregado: {len(config_base20['dimensions'])} dimens√µes")
    
    # Carregar Base8
    config_base8 = processor.load_configuration("base8")
    print(f"  ‚úÖ Base8 carregado: {len(config_base8['dimensions'])} dimens√µes")
    
    # Verificar que as configura√ß√µes s√£o diferentes
    base20_total = sum(len(questions) for questions in config_base20['dimensions'].values())
    base8_total = sum(len(questions) for questions in config_base8['dimensions'].values())
    
    print(f"\nüìä Total de quest√µes:")
    print(f"  Base20: {base20_total} quest√µes")
    print(f"  Base8: {base8_total} quest√µes")
    
    return base20_total != base8_total


def main():
    """Executa todos os testes"""
    print("Teste de Estrutura das Dimens√µes")
    print("=" * 50)
    
    # Executar testes
    base20_ok = test_base20_structure()
    base8_ok = test_base8_structure()
    switching_ok = test_dimension_switching()
    
    # Resumo
    print("\n" + "=" * 50)
    print("RESUMO DOS TESTES:")
    print(f"‚úÖ Base20 estrutura correta: {'SIM' if base20_ok else 'N√ÉO'}")
    print(f"‚úÖ Base8 estrutura correta: {'SIM' if base8_ok else 'N√ÉO'}")
    print(f"‚úÖ Troca de configura√ß√µes: {'SIM' if switching_ok else 'N√ÉO'}")
    
    if base20_ok and base8_ok and switching_ok:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("\nO sistema est√° processando corretamente:")
        print("  ‚Ä¢ Base20: QS=10, QI=7, QO=9 quest√µes")
        print("  ‚Ä¢ Base8: QS=4, QI=3, QO=1 quest√£o")
        print("  ‚Ä¢ Troca din√¢mica entre configura√ß√µes")
    else:
        print("\n‚ùå ALGUNS TESTES FALHARAM")
        if not base20_ok:
            print("  - Base20 n√£o est√° processando a estrutura correta")
        if not base8_ok:
            print("  - Base8 n√£o est√° processando a estrutura correta")
        if not switching_ok:
            print("  - Troca de configura√ß√µes n√£o est√° funcionando")


if __name__ == "__main__":
    main()