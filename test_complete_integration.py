"""
Complete integration test for the questionnaire processing system

This test demonstrates the complete workflow from raw questionnaire data
to processed results with means by question and dimension.
"""
import pandas as pd
import numpy as np
from core import QuestionnaireProcessor, ScaleConverter, TextNormalizer


def test_complete_workflow():
    """Test the complete questionnaire processing workflow"""
    print("=== Teste de Integra√ß√£o Completa ===\n")
    
    # Step 1: Create realistic questionnaire data
    print("1Ô∏è‚É£ Criando dados de question√°rio realistas...")
    
    questionnaire_data = pd.DataFrame({
        # System Quality questions
        "O sistema √© f√°cil de usar.": [
            "Concordo totalmente", "Concordo", "Indiferente", "Concordo", "Concordo totalmente",
            "Discordo", "Concordo", "Concordo totalmente", "Concordo", "Indiferente"
        ],
        "O sistema funciona sem falhas.": [
            "Concordo", "Discordo", "Indiferente", "Concordo", "Concordo totalmente",
            "Discordo totalmente", "Concordo", "Concordo", "Discordo", "Concordo"
        ],
        "√â f√°cil localizar os servi√ßos e as informa√ß√µes no sistema.": [
            "Concordo totalmente", "Concordo", "Concordo", "Indiferente", "Concordo",
            "Concordo", "Concordo totalmente", "Concordo", "Concordo", "Concordo totalmente"
        ],
        
        # Information Quality questions
        "As informa√ß√µes s√£o f√°ceis de entender.": [
            "Concordo totalmente", "Concordo totalmente", "Concordo", "Concordo", "Concordo totalmente",
            "Concordo", "Concordo totalmente", "Concordo", "Concordo totalmente", "Concordo"
        ],
        "As informa√ß√µes s√£o precisas.": [
            "Concordo", "Concordo", "Concordo totalmente", "Indiferente", "Concordo",
            "Concordo totalmente", "Concordo", "Concordo", "Concordo", "Concordo totalmente"
        ],
        "As informa√ß√µes disponibilizadas est√£o atualizadas.": [
            "Concordo", "Indiferente", "Concordo", "Discordo", "Concordo",
            "Concordo", "Concordo", "Indiferente", "Concordo", "Concordo"
        ],
        
        # Operation Quality questions
        "Os servi√ßos atendem √†s minhas expectativas.": [
            "Concordo", "Concordo", "Indiferente", "Discordo", "Concordo",
            "Concordo totalmente", "Concordo", "Concordo", "Indiferente", "Concordo"
        ],
        "Consigo obter o que preciso no menor tempo poss√≠vel.": [
            "Discordo", "Concordo", "Indiferente", "Discordo", "Concordo",
            "Concordo", "Indiferente", "Concordo", "Discordo", "Concordo"
        ],
        
        # Satisfaction and profile
        "Qual o seu n√≠vel de satisfa√ß√£o com o Sistema?": [
            "Muito satisfeito", "Satisfeito", "Satisfeito", "Indiferente", "Muito satisfeito",
            "Satisfeito", "Muito satisfeito", "Satisfeito", "Indiferente", "Satisfeito"
        ],
        "Qual o seu sexo?": [
            "Masculino", "Feminino", "Masculino", "Feminino", "Outro",
            "Masculino", "Feminino", "Masculino", "Feminino", "Masculino"
        ],
        "Timestamp": pd.date_range("2024-01-01", periods=10)
    })
    
    print(f"   ‚úÖ Dataset criado: {len(questionnaire_data)} respostas, {len(questionnaire_data.columns)} colunas")
    
    # Step 2: Initialize components
    print("\n2Ô∏è‚É£ Inicializando componentes do sistema...")
    
    text_normalizer = TextNormalizer()
    scale_converter = ScaleConverter()
    processor = QuestionnaireProcessor()
    
    print("   ‚úÖ TextNormalizer inicializado")
    print("   ‚úÖ ScaleConverter inicializado")
    print("   ‚úÖ QuestionnaireProcessor inicializado")
    
    # Step 3: Test individual components
    print("\n3Ô∏è‚É£ Testando componentes individuais...")
    
    # Test text normalization
    sample_text = "O sistema √© f√°cil de usar?"
    normalized = text_normalizer.normalize_question_text(sample_text)
    print(f"   üìù Normaliza√ß√£o: '{sample_text}' ‚Üí '{normalized}'")
    
    # Test scale conversion
    sample_responses = pd.Series(["Concordo totalmente", "Discordo", "Indiferente"])
    converted = scale_converter.convert_likert_column(sample_responses)
    print(f"   üî¢ Convers√£o de escala: {sample_responses.tolist()} ‚Üí {converted.tolist()}")
    
    # Step 4: Process complete questionnaire
    print("\n4Ô∏è‚É£ Processando question√°rio completo...")
    
    try:
        results = processor.process_questionnaire_data(questionnaire_data, "base20")
        
        print(f"   ‚úÖ Processamento conclu√≠do com sucesso!")
        print(f"   üìä M√©dia geral: {results.overall_mean:.2f}")
        print(f"   üìà Satisfa√ß√£o: {results.satisfaction_score:.2f}")
        print(f"   üéØ Dimens√µes processadas: {len(results.dimensions)}")
        
        # Step 5: Analyze results by dimension
        print("\n5Ô∏è‚É£ Analisando resultados por dimens√£o...")
        
        for dimension_name, dimension_stats in results.dimensions.items():
            print(f"\n   üìã {dimension_name}:")
            print(f"      M√©dia: {dimension_stats.mean_score:.2f}")
            print(f"      Quest√µes: {dimension_stats.question_count}")
            print(f"      Respostas v√°lidas: {dimension_stats.valid_responses}")
            
            # Show individual questions
            for question in dimension_stats.questions:
                print(f"        ‚Ä¢ {question.question_text[:50]}... ‚Üí {question.mean_score:.2f}")
        
        # Step 6: Generate summaries
        print("\n6Ô∏è‚É£ Gerando resumos...")
        
        dimension_summary = processor.get_dimension_summary(results)
        question_summary = processor.get_question_summary(results)
        
        print(f"   üìä Resumo de dimens√µes gerado: {len(dimension_summary)} linhas")
        print(f"   üìù Resumo de quest√µes gerado: {len(question_summary)} linhas")
        
        # Step 7: Export results
        print("\n7Ô∏è‚É£ Exportando resultados...")
        
        export_dict = processor.export_results_to_dict(results)
        
        print(f"   üíæ Dados exportados para dicion√°rio")
        print(f"   üì¶ Estrutura: {list(export_dict.keys())}")
        
        # Step 8: Validate results
        print("\n8Ô∏è‚É£ Validando resultados...")
        
        # Check that all means are within valid range (1-5)
        valid_range = True
        for dimension_stats in results.dimensions.values():
            if not (1 <= dimension_stats.mean_score <= 5):
                valid_range = False
                break
            for question in dimension_stats.questions:
                if not (1 <= question.mean_score <= 5):
                    valid_range = False
                    break
        
        print(f"   ‚úÖ M√©dias dentro do intervalo v√°lido (1-5): {valid_range}")
        
        # Check that satisfaction score is valid
        satisfaction_valid = 1 <= results.satisfaction_score <= 5
        print(f"   ‚úÖ Pontua√ß√£o de satisfa√ß√£o v√°lida: {satisfaction_valid}")
        
        # Check for processing errors
        no_errors = len(results.processing_errors) == 0
        print(f"   ‚úÖ Sem erros de processamento: {no_errors}")
        
        if results.question_mapping_issues:
            print(f"   ‚ö†Ô∏è  Quest√µes n√£o mapeadas: {len(results.question_mapping_issues)}")
        
        print(f"\nüéâ Teste de integra√ß√£o conclu√≠do com sucesso!")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erro no processamento: {str(e)}")
        return False


def test_performance():
    """Test performance with larger dataset"""
    print("\n=== Teste de Performance ===\n")
    
    import time
    
    # Create larger dataset
    print("üìä Criando dataset grande para teste de performance...")
    
    n_responses = 1000
    responses = ["Discordo totalmente", "Discordo", "Indiferente", "Concordo", "Concordo totalmente"]
    
    large_data = pd.DataFrame({
        "O sistema √© f√°cil de usar.": np.random.choice(responses, n_responses),
        "As informa√ß√µes s√£o claras.": np.random.choice(responses, n_responses),
        "Os servi√ßos atendem √†s expectativas.": np.random.choice(responses, n_responses),
        "Qual o seu n√≠vel de satisfa√ß√£o?": np.random.choice(
            ["Muito insatisfeito", "Insatisfeito", "Indiferente", "Satisfeito", "Muito satisfeito"], 
            n_responses
        )
    })
    
    print(f"   ‚úÖ Dataset criado: {len(large_data):,} respostas")
    
    # Process and time it
    processor = QuestionnaireProcessor()
    
    start_time = time.time()
    results = processor.process_questionnaire_data(large_data, "base20")
    end_time = time.time()
    
    processing_time = end_time - start_time
    
    print(f"\n‚è±Ô∏è  Tempo de processamento: {processing_time:.3f} segundos")
    print(f"üöÄ Taxa de processamento: {len(large_data)/processing_time:,.0f} respostas/segundo")
    print(f"üìä Resultado: M√©dia geral {results.overall_mean:.2f}")
    
    return processing_time < 5.0  # Should process 1000 responses in under 5 seconds


if __name__ == "__main__":
    print("Teste de Integra√ß√£o Completa do Sistema de Processamento de Question√°rios")
    print("=" * 80)
    
    # Run integration test
    integration_success = test_complete_workflow()
    
    # Run performance test
    performance_success = test_performance()
    
    print("\n" + "=" * 80)
    print("RESUMO DOS TESTES:")
    print(f"‚úÖ Integra√ß√£o completa: {'PASSOU' if integration_success else 'FALHOU'}")
    print(f"‚úÖ Performance: {'PASSOU' if performance_success else 'FALHOU'}")
    
    if integration_success and performance_success:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("\nO sistema est√° pronto para:")
        print("  ‚Ä¢ Processar question√°rios base20 e base8")
        print("  ‚Ä¢ Converter escalas Likert automaticamente")
        print("  ‚Ä¢ Calcular m√©dias por quest√£o e dimens√£o")
        print("  ‚Ä¢ Organizar resultados por framework de qualidade")
        print("  ‚Ä¢ Tratar erros graciosamente")
        print("  ‚Ä¢ Processar grandes volumes de dados eficientemente")
    else:
        print("\n‚ùå ALGUNS TESTES FALHARAM - Revisar implementa√ß√£o")