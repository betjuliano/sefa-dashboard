"""
Teste espec√≠fico para verificar se os filtros da barra lateral est√£o funcionando

Este script testa especificamente os problemas identificados nos filtros.
"""

import pandas as pd
import numpy as np
import sys
import os

# Adicionar o diret√≥rio atual ao path para imports
sys.path.append('.')

def test_filter_functions():
    """Testa se as fun√ß√µes de filtro est√£o funcionando"""
    print("üîç Testando fun√ß√µes de filtro...")
    
    try:
        from app_integration import (
            app_integration,
            update_global_variables,
            filter_by_question_set
        )
        
        # Criar dataset de teste
        test_data = pd.DataFrame({
            "O sistema √© f√°cil de usar.": ["Concordo", "Concordo totalmente"],
            "As informa√ß√µes s√£o claras.": ["Concordo", "Concordo"],
            "Consigo obter o que preciso no menor tempo poss√≠vel.": ["Indiferente", "Concordo"],
            "O Portal √© f√°cil de usar.": ["Concordo", "Concordo totalmente"],
            "Qual o seu sexo?": ["Masculino", "Feminino"],
            "Timestamp": pd.date_range("2024-01-01", periods=2)
        })
        
        print(f"‚úÖ Dataset de teste criado: {len(test_data)} linhas, {len(test_data.columns)} colunas")
        
        # Testar cada filtro
        for question_set in ["Completo", "20 quest√µes", "8 quest√µes"]:
            print(f"\nüîÑ Testando filtro: {question_set}")
            
            try:
                # Atualizar vari√°veis globais
                update_global_variables(question_set)
                print(f"  ‚úÖ Vari√°veis globais atualizadas para {question_set}")
                
                # Aplicar filtro
                filtered_data = filter_by_question_set(test_data, question_set)
                print(f"  ‚úÖ Filtro aplicado: {len(filtered_data.columns)} colunas resultantes")
                
                # Verificar se o resultado √© v√°lido
                if len(filtered_data) > 0 and len(filtered_data.columns) > 0:
                    print(f"  ‚úÖ Resultado v√°lido: {len(filtered_data)} linhas, {len(filtered_data.columns)} colunas")
                else:
                    print(f"  ‚ùå Resultado inv√°lido: dataset vazio")
                    return False
                
            except Exception as e:
                print(f"  ‚ùå Erro no filtro {question_set}: {str(e)}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro geral nos testes de filtro: {str(e)}")
        return False


def test_configuration_loading():
    """Testa se as configura√ß√µes est√£o sendo carregadas corretamente"""
    print("\nüîç Testando carregamento de configura√ß√µes...")
    
    try:
        from app_integration import app_integration
        
        # Testar cada configura√ß√£o
        for question_set, internal_name in [("Completo", "base20"), ("20 quest√µes", "base20"), ("8 quest√µes", "base8")]:
            print(f"\nüîÑ Testando configura√ß√£o: {question_set} -> {internal_name}")
            
            try:
                config = app_integration.processor.load_configuration(internal_name)
                
                # Verificar estrutura da configura√ß√£o
                required_keys = ["dimensions", "likert_map", "satisfaction_field", "profile_fields"]
                for key in required_keys:
                    if key not in config:
                        print(f"  ‚ùå Chave '{key}' n√£o encontrada na configura√ß√£o")
                        return False
                
                print(f"  ‚úÖ Configura√ß√£o v√°lida: {len(config['dimensions'])} dimens√µes")
                
                # Verificar dimens√µes
                for dim_name, questions in config["dimensions"].items():
                    print(f"    ‚Ä¢ {dim_name}: {len(questions)} quest√µes")
                
            except Exception as e:
                print(f"  ‚ùå Erro ao carregar configura√ß√£o {question_set}: {str(e)}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro geral no carregamento de configura√ß√µes: {str(e)}")
        return False


def test_global_variables_update():
    """Testa se as vari√°veis globais est√£o sendo atualizadas corretamente"""
    print("\nüîç Testando atualiza√ß√£o de vari√°veis globais...")
    
    try:
        from app_integration import update_global_variables
        import app
        
        # Testar cada conjunto de quest√µes
        for question_set in ["Completo", "20 quest√µes", "8 quest√µes"]:
            print(f"\nüîÑ Testando vari√°veis globais para: {question_set}")
            
            try:
                # Atualizar vari√°veis
                update_global_variables(question_set)
                
                # Verificar se as vari√°veis foram atualizadas
                required_vars = ["MAPPING", "DIMENSIONS", "LIKERT_MAP", "SAT_FIELD", "PROFILE_FIELDS"]
                for var_name in required_vars:
                    if not hasattr(app, var_name):
                        print(f"  ‚ùå Vari√°vel '{var_name}' n√£o encontrada no app")
                        return False
                    
                    var_value = getattr(app, var_name)
                    if var_value is None:
                        print(f"  ‚ùå Vari√°vel '{var_name}' √© None")
                        return False
                
                print(f"  ‚úÖ Todas as vari√°veis globais atualizadas corretamente")
                print(f"    ‚Ä¢ Dimens√µes: {len(app.DIMENSIONS)}")
                print(f"    ‚Ä¢ Mapeamento Likert: {len(app.LIKERT_MAP)} itens")
                
            except Exception as e:
                print(f"  ‚ùå Erro ao atualizar vari√°veis para {question_set}: {str(e)}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro geral na atualiza√ß√£o de vari√°veis globais: {str(e)}")
        return False


def test_streamlit_compatibility():
    """Testa compatibilidade com Streamlit (sem executar Streamlit)"""
    print("\nüîç Testando compatibilidade com Streamlit...")
    
    try:
        # Simular session_state
        class MockSessionState:
            def __init__(self):
                self.question_set = "Completo"
                self.removed_columns = {}
        
        # Simular st.session_state
        import streamlit as st
        if not hasattr(st, 'session_state'):
            st.session_state = MockSessionState()
        
        from app_integration import app_integration
        
        # Testar fun√ß√µes que usam session_state
        try:
            stats = app_integration.get_processing_stats()
            print(f"  ‚úÖ Estat√≠sticas de processamento obtidas: {len(stats)} campos")
            
            # Testar cache
            app_integration.clear_cache()
            print(f"  ‚úÖ Cache limpo com sucesso")
            
            return True
            
        except Exception as e:
            print(f"  ‚ùå Erro na compatibilidade com Streamlit: {str(e)}")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro geral na compatibilidade com Streamlit: {str(e)}")
        return False


def test_app_py_integration():
    """Testa se o app.py foi integrado corretamente"""
    print("\nüîç Testando integra√ß√£o com app.py...")
    
    try:
        # Verificar se app.py existe e foi modificado
        if not os.path.exists("app.py"):
            print("‚ùå app.py n√£o encontrado")
            return False
        
        with open("app.py", "r", encoding="utf-8") as f:
            app_content = f.read()
        
        # Verificar se as modifica√ß√µes est√£o presentes
        checks = [
            ("Imports do novo sistema", "from app_integration import"),
            ("Fun√ß√£o update_global_variables modificada", "NOVO SISTEMA"),
            ("Melhorias da barra lateral", "add_sidebar_enhancements"),
            ("Fun√ß√£o normalize_likert modificada", "new_normalize_likert"),
            ("Fun√ß√£o filter_by_question_set modificada", "new_filter_by_question_set")
        ]
        
        for check_name, check_text in checks:
            if check_text in app_content:
                print(f"  ‚úÖ {check_name}")
            else:
                print(f"  ‚ùå {check_name} - n√£o encontrado")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o de integra√ß√£o do app.py: {str(e)}")
        return False


def run_sidebar_filter_tests():
    """Executa todos os testes espec√≠ficos dos filtros da barra lateral"""
    print("üß™ Teste Espec√≠fico dos Filtros da Barra Lateral")
    print("=" * 60)
    
    tests = [
        ("Fun√ß√µes de Filtro", test_filter_functions),
        ("Carregamento de Configura√ß√µes", test_configuration_loading),
        ("Atualiza√ß√£o de Vari√°veis Globais", test_global_variables_update),
        ("Compatibilidade com Streamlit", test_streamlit_compatibility),
        ("Integra√ß√£o com app.py", test_app_py_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå Erro inesperado em {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumo dos resultados
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES DOS FILTROS:")
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
        print(f"  {status} - {test_name}")
        if success:
            passed += 1
    
    print(f"\nüéØ RESULTADO: {passed}/{total} testes passaram")
    
    if passed == total:
        print("\nüéâ TODOS OS TESTES DOS FILTROS PASSARAM!")
        print("‚úÖ Os filtros da barra lateral est√£o funcionando corretamente!")
        return True
    else:
        print(f"\n‚ùå {total - passed} TESTES FALHARAM!")
        print("üîß Os filtros da barra lateral precisam de corre√ß√µes!")
        return False


if __name__ == "__main__":
    success = run_sidebar_filter_tests()
    
    if success:
        print("\n" + "=" * 60)
        print("üéØ FILTROS DA BARRA LATERAL FUNCIONANDO!")
        print("\nüöÄ PR√ìXIMOS PASSOS:")
        print("  1. Execute: streamlit run app.py")
        print("  2. Teste os filtros manualmente")
        print("  3. Verifique se as dimens√µes s√£o reorganizadas")
        exit(0)
    else:
        print("\n" + "=" * 60)
        print("‚ùå FILTROS PRECISAM DE CORRE√á√ïES!")
        print("\nüîß A√á√ïES NECESS√ÅRIAS:")
        print("  1. Corrija os problemas identificados")
        print("  2. Execute este teste novamente")
        print("  3. Teste manualmente ap√≥s corre√ß√µes")
        exit(1)