"""
Demonstration script for QuestionnaireProcessor functionality

This script shows how to use the QuestionnaireProcessor class for processing
questionnaire data, calculating means by question and dimension, and organizing
results according to the quality framework.
"""
import pandas as pd
import numpy as np
from core.questionnaire_processor import QuestionnaireProcessor


def create_sample_data():
    """Create realistic sample questionnaire data"""
    np.random.seed(42)  # For reproducible results
    
    # Create responses with realistic distribution
    responses = ["Discordo totalmente", "Discordo", "Indiferente", "Concordo", "Concordo totalmente"]
    weights = [0.05, 0.15, 0.20, 0.35, 0.25]  # More positive responses
    
    n_responses = 100
    
    # Generate responses for each question
    data = {}
    
    # System Quality questions
    data["O sistema √© f√°cil de usar."] = np.random.choice(responses, n_responses, p=weights)
    data["O sistema funciona sem falhas."] = np.random.choice(responses, n_responses, p=[0.08, 0.20, 0.25, 0.30, 0.17])
    data["√â f√°cil localizar os servi√ßos e as informa√ß√µes no sistema."] = np.random.choice(responses, n_responses, p=weights)
    data["A navega√ß√£o pelo sistema √© intuitiva."] = np.random.choice(responses, n_responses, p=weights)
    
    # Information Quality questions  
    data["As informa√ß√µes s√£o f√°ceis de entender."] = np.random.choice(responses, n_responses, p=[0.03, 0.12, 0.18, 0.40, 0.27])
    data["As informa√ß√µes s√£o precisas."] = np.random.choice(responses, n_responses, p=[0.02, 0.08, 0.15, 0.45, 0.30])
    data["As informa√ß√µes disponibilizadas est√£o atualizadas."] = np.random.choice(responses, n_responses, p=[0.05, 0.15, 0.25, 0.35, 0.20])
    
    # Operation Quality questions
    data["Os servi√ßos atendem √†s minhas expectativas."] = np.random.choice(responses, n_responses, p=[0.07, 0.18, 0.22, 0.33, 0.20])
    data["Consigo obter o que preciso no menor tempo poss√≠vel."] = np.random.choice(responses, n_responses, p=[0.10, 0.20, 0.25, 0.30, 0.15])
    
    # Satisfaction question
    satisfaction_responses = ["Muito insatisfeito", "Insatisfeito", "Indiferente", "Satisfeito", "Muito satisfeito"]
    data["Qual o seu n√≠vel de satisfa√ß√£o com o Sistema?"] = np.random.choice(satisfaction_responses, n_responses, p=[0.05, 0.15, 0.20, 0.40, 0.20])
    
    # Profile questions
    data["Qual o seu sexo?"] = np.random.choice(["Masculino", "Feminino", "Outro"], n_responses, p=[0.45, 0.50, 0.05])
    data["Qual a sua idade?"] = np.random.choice(["18-25", "26-35", "36-45", "46-55", "56+"], n_responses, p=[0.20, 0.25, 0.25, 0.20, 0.10])
    
    # Add some missing values to make it realistic
    for col in data:
        if "satisfa√ß√£o" not in col.lower() and "sexo" not in col.lower() and "idade" not in col.lower():
            # Add 5% missing values to question columns
            missing_indices = np.random.choice(n_responses, int(n_responses * 0.05), replace=False)
            for idx in missing_indices:
                data[col][idx] = ""
    
    return pd.DataFrame(data)


def demo_basic_processing():
    """Demonstrate basic questionnaire processing"""
    print("=== Demonstra√ß√£o B√°sica do QuestionnaireProcessor ===\n")
    
    # Create sample data
    df = create_sample_data()
    print(f"Dataset criado com {len(df)} respostas e {len(df.columns)} colunas")
    print(f"Colunas: {list(df.columns)[:3]}... (e mais {len(df.columns)-3})")
    
    # Initialize processor
    processor = QuestionnaireProcessor()
    
    try:
        # Process the data
        results = processor.process_questionnaire_data(df, "base20")
        
        print(f"\nüìä Resultados Gerais:")
        print(f"  M√©dia Geral: {results.overall_mean:.2f}")
        print(f"  Total de Respostas: {results.total_responses}")
        print(f"  Respostas V√°lidas: {results.valid_responses}")
        print(f"  Satisfa√ß√£o Geral: {results.satisfaction_score:.2f}" if results.satisfaction_score else "  Satisfa√ß√£o: N√£o dispon√≠vel")
        
        print(f"\nüéØ Dimens√µes Processadas: {len(results.dimensions)}")
        for dimension_name, dimension_stats in results.dimensions.items():
            print(f"  {dimension_name}: {dimension_stats.mean_score:.2f} ({dimension_stats.question_count} quest√µes)")
        
        if results.processing_errors:
            print(f"\n‚ö†Ô∏è  Erros de Processamento: {len(results.processing_errors)}")
            for error in results.processing_errors[:3]:
                print(f"  - {error}")
        
        if results.question_mapping_issues:
            print(f"\nüîç Quest√µes N√£o Mapeadas: {len(results.question_mapping_issues)}")
            for issue in results.question_mapping_issues[:3]:
                print(f"  - {issue}")
        
        return results
        
    except Exception as e:
        print(f"‚ùå Erro no processamento: {str(e)}")
        return None


def demo_detailed_analysis(results):
    """Demonstrate detailed analysis capabilities"""
    if not results:
        return
    
    print("\n=== An√°lise Detalhada por Dimens√£o ===\n")
    
    processor = QuestionnaireProcessor()
    
    # Get dimension summary
    dimension_summary = processor.get_dimension_summary(results)
    print("üìã Resumo por Dimens√£o:")
    print(dimension_summary.to_string(index=False))
    
    # Get question summary
    question_summary = processor.get_question_summary(results)
    print(f"\nüìù Resumo Detalhado por Quest√£o (primeiras 5):")
    print(question_summary.head().to_string(index=False))
    
    # Show best and worst performing questions
    question_summary_sorted = question_summary.sort_values('M√©dia', ascending=False)
    
    print(f"\nüèÜ Top 3 Quest√µes com Melhor Avalia√ß√£o:")
    top_questions = question_summary_sorted.head(3)
    for _, row in top_questions.iterrows():
        print(f"  {row['M√©dia']:.2f} - {row['Quest√£o'][:60]}...")
    
    print(f"\nüìâ Top 3 Quest√µes com Pior Avalia√ß√£o:")
    bottom_questions = question_summary_sorted.tail(3)
    for _, row in bottom_questions.iterrows():
        print(f"  {row['M√©dia']:.2f} - {row['Quest√£o'][:60]}...")


def demo_export_capabilities(results):
    """Demonstrate export capabilities"""
    if not results:
        return
    
    print("\n=== Capacidades de Exporta√ß√£o ===\n")
    
    processor = QuestionnaireProcessor()
    
    # Export to dictionary
    export_dict = processor.export_results_to_dict(results)
    
    print("üì§ Dados Exportados para Dicion√°rio:")
    print(f"  Estat√≠sticas Gerais: {len(export_dict['overall_statistics'])} campos")
    print(f"  Dimens√µes: {len(export_dict['dimensions'])} dimens√µes")
    print(f"  Informa√ß√µes de Processamento: {len(export_dict['processing_info'])} campos")
    
    # Show sample of exported data
    print(f"\nüìä Amostra dos Dados Exportados:")
    overall_stats = export_dict['overall_statistics']
    for key, value in overall_stats.items():
        if isinstance(value, float):
            print(f"  {key}: {value:.2f}")
        else:
            print(f"  {key}: {value}")
    
    # Show dimension details
    print(f"\nüéØ Detalhes das Dimens√µes:")
    for dim_name, dim_data in export_dict['dimensions'].items():
        print(f"  {dim_name}:")
        print(f"    M√©dia: {dim_data['mean_score']:.2f}")
        print(f"    Quest√µes: {dim_data['question_count']}")
        print(f"    Respostas V√°lidas: {dim_data['valid_responses']}")


def demo_comparison_base20_vs_base8():
    """Demonstrate comparison between base20 and base8 processing"""
    print("\n=== Compara√ß√£o Base20 vs Base8 ===\n")
    
    # Create smaller dataset that works for both
    common_questions_data = pd.DataFrame({
        "O sistema √© f√°cil de usar.": ["Concordo totalmente", "Concordo", "Indiferente", "Concordo", "Concordo totalmente"],
        "As informa√ß√µes s√£o claras.": ["Concordo", "Concordo totalmente", "Concordo", "Indiferente", "Concordo"],
        "Consigo obter o que preciso no menor tempo poss√≠vel.": ["Concordo", "Concordo", "Concordo totalmente", "Concordo", "Indiferente"],
        "Qual o seu n√≠vel de satisfa√ß√£o?": ["Muito satisfeito", "Satisfeito", "Satisfeito", "Indiferente", "Muito satisfeito"]
    })
    
    processor = QuestionnaireProcessor()
    
    try:
        # Process with base20
        results_base20 = processor.process_questionnaire_data(common_questions_data, "base20")
        print("üìä Processamento Base20:")
        print(f"  M√©dia Geral: {results_base20.overall_mean:.2f}")
        print(f"  Dimens√µes: {len(results_base20.dimensions)}")
        
        # Process with base8
        results_base8 = processor.process_questionnaire_data(common_questions_data, "base8")
        print(f"\nüìä Processamento Base8:")
        print(f"  M√©dia Geral: {results_base8.overall_mean:.2f}")
        print(f"  Dimens√µes: {len(results_base8.dimensions)}")
        
        # Compare dimensions
        print(f"\nüîç Compara√ß√£o de Dimens√µes:")
        for dim_name in results_base20.dimensions:
            if dim_name in results_base8.dimensions:
                base20_mean = results_base20.dimensions[dim_name].mean_score
                base8_mean = results_base8.dimensions[dim_name].mean_score
                print(f"  {dim_name}:")
                print(f"    Base20: {base20_mean:.2f}")
                print(f"    Base8:  {base8_mean:.2f}")
                print(f"    Diferen√ßa: {abs(base20_mean - base8_mean):.2f}")
        
    except Exception as e:
        print(f"‚ùå Erro na compara√ß√£o: {str(e)}")


def demo_error_handling():
    """Demonstrate error handling capabilities"""
    print("\n=== Demonstra√ß√£o de Tratamento de Erros ===\n")
    
    processor = QuestionnaireProcessor()
    
    # Test with problematic data
    problematic_data = pd.DataFrame({
        "Quest√£o Inexistente 1": ["Concordo", "Discordo", "Indiferente"],
        "Quest√£o Inexistente 2": ["Sim", "N√£o", "Talvez"],
        "Dados Num√©ricos": [1, 2, 3],
        "Dados Mistos": ["Concordo", 123, None]
    })
    
    try:
        results = processor.process_questionnaire_data(problematic_data, "base20")
        
        print("üìä Resultados com Dados Problem√°ticos:")
        print(f"  M√©dia Geral: {results.overall_mean}")
        print(f"  Dimens√µes Processadas: {len(results.dimensions)}")
        print(f"  Erros de Processamento: {len(results.processing_errors)}")
        print(f"  Quest√µes N√£o Mapeadas: {len(results.question_mapping_issues)}")
        
        if results.processing_errors:
            print(f"\n‚ö†Ô∏è  Erros Encontrados:")
            for error in results.processing_errors:
                print(f"  - {error}")
        
        if results.question_mapping_issues:
            print(f"\nüîç Quest√µes N√£o Mapeadas:")
            for issue in results.question_mapping_issues:
                print(f"  - {issue}")
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {str(e)}")


if __name__ == "__main__":
    print("Demonstra√ß√£o do QuestionnaireProcessor")
    print("=" * 60)
    
    # Run all demonstrations
    results = demo_basic_processing()
    demo_detailed_analysis(results)
    demo_export_capabilities(results)
    demo_comparison_base20_vs_base8()
    demo_error_handling()
    
    print("\n" + "=" * 60)
    print("Demonstra√ß√£o conclu√≠da!")
    print("\nO QuestionnaireProcessor oferece:")
    print("‚úÖ Processamento autom√°tico de escalas Likert")
    print("‚úÖ C√°lculo de m√©dias por quest√£o e dimens√£o")
    print("‚úÖ Organiza√ß√£o por framework de qualidade (QS, QI, QO)")
    print("‚úÖ Tratamento robusto de erros")
    print("‚úÖ Suporte para base20 e base8")
    print("‚úÖ Exporta√ß√£o flex√≠vel de resultados")
    print("‚úÖ Valida√ß√£o e relat√≥rios de qualidade de dados")